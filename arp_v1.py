import netifaces
import sqlite3
from scapy.all import ARP, Ether, srp
from mac_vendor_lookup import MacLookup
from tabulate import tabulate
import json
from datetime import datetime
import os

DB_FILE = "arp_scan_v1.db"
# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –±–∞–∑—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –¥–Ω—è—Ö
VENDOR_DB_CACHE_DAYS = 7


def update_vendor_database():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π MAC-–∞–¥—Ä–µ—Å–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.
    """
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É-–º–∞—Ä–∫–µ—Ä—É —Å –¥–∞—Ç–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_marker_file = os.path.expanduser("~/.mac_vendor_update")
        need_update = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–∑—É
        if os.path.exists(update_marker_file):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            last_update_time = os.path.getmtime(update_marker_file)
            current_time = datetime.now().timestamp()
            days_since_update = (current_time - last_update_time) / (60 * 60 * 24)

            # –ï—Å–ª–∏ –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if days_since_update < VENDOR_DB_CACHE_DAYS:
                print(f"Vendor database is up-to-date (last updated {int(days_since_update)} days ago)")
                need_update = False

        if need_update:
            print("Updating vendor database... This may take a few moments...")
            mac_lookup = MacLookup()
            mac_lookup.update_vendors()

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-–º–∞—Ä–∫–µ—Ä —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            with open(update_marker_file, "w") as f:
                f.write(datetime.now().isoformat())

            print("Vendor database updated successfully!")

        return True
    except Exception as e:
        print(f"Warning: Failed to update vendor database: {e}")
        return False


def get_vendor(mac_address, mac_lookup):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ –ø–æ MAC-–∞–¥—Ä–µ—Å—É.
    """
    try:
        vendor = mac_lookup.lookup(mac_address)
        return vendor
    except Exception:
        return None


def get_default_interface_and_ip_range():
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–ª—é–∑–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        gateways = netifaces.gateways()
        default_gateway = gateways["default"][netifaces.AF_INET]
        gateway_ip = default_gateway[0]  # IP-–∞–¥—Ä–µ—Å —à–ª—é–∑–∞
        interface = default_gateway[1]  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        iface_info = netifaces.ifaddresses(interface)[netifaces.AF_INET][0]
        ip = iface_info["addr"]
        netmask = iface_info["netmask"]

        # –†–∞—Å—á–µ—Ç –º–∞—Å–∫–∏ –ø–æ–¥—Å–µ—Ç–∏ –≤ –±–∏—Ç–∞—Ö (CIDR notation)
        netmask_bits = sum([bin(int(x)).count("1") for x in netmask.split(".")])
        ip_range = f"{ip}/{netmask_bits}"

        return interface, ip_range
    except Exception as e:
        raise RuntimeError(f"Failed to detect interface or IP range: {e}")


def arp_scan(ip_range, interface):
    arp_request = ARP(pdst=ip_range)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = broadcast / arp_request

    answered, _ = srp(packet, iface=interface, timeout=2, verbose=False)

    devices = []
    for sent, received in answered:
        devices.append({"ip": received.psrc, "mac": received.hwsrc})

    return devices


def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS devices (
        mac TEXT PRIMARY KEY,
        ip TEXT,
        vendor TEXT,
        first_seen TEXT
    )
    """)

    conn.commit()
    return conn


def load_known_devices(conn):
    cursor = conn.cursor()
    cursor.execute("SELECT mac FROM devices")
    return set(row[0] for row in cursor.fetchall())


def save_new_devices(conn, new_devices):
    cursor = conn.cursor()

    for dev in new_devices:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT mac FROM devices WHERE mac = ?", (dev["mac"],))
        exists = cursor.fetchone()

        if not exists:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ
            cursor.execute(
                "INSERT INTO devices (mac, ip, vendor, first_seen) VALUES (?, ?, ?, ?)",
                (dev["mac"], dev["ip"], dev["vendor"], dev["first_seen"]),
            )

    conn.commit()


def update_existing_device_ip(conn, mac, ip):
    # –û–±–Ω–æ–≤–ª—è–µ–º IP-–∞–¥—Ä–µ—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    cursor = conn.cursor()
    cursor.execute("UPDATE devices SET ip = ? WHERE mac = ?", (ip, mac))
    conn.commit()


if __name__ == "__main__":
    print("ARP Network Scanner starting...")

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π MAC-–∞–¥—Ä–µ—Å–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    print("\n=== Vendor Database ===")
    update_vendor_database()
    # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MacLookup –¥–ª—è –≤—Å–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    mac_lookup = MacLookup()
    print("======================\n")

    try:
        print("=== Network Setup ===")
        interface, ip_range = get_default_interface_and_ip_range()
        print(f"Interface: {interface}")
        print(f"IP Range: {ip_range}")
        print("====================\n")
    except Exception as e:
        print(f"Error: {e}")
        exit(1)

    print("=== Database Operations ===")
    print("Initializing database...")
    conn = init_db()
    print("Loading known devices...")
    known_macs = load_known_devices(conn)
    print(f"Found {len(known_macs)} devices in database.")
    print("=========================\n")

    print("=== Scanning Network ===")
    print("Starting ARP scan...")
    devices = arp_scan(ip_range, interface)
    print(f"ARP scan completed. Found {len(devices)} devices.")
    print("======================\n")

    if devices:
        print("=== Processing Results ===")
        print("Looking up vendor information...")

        mac_cache = {}
        table = []
        json_output = []
        new_devices = []

        total_devices = len(devices)
        processed = 0

        for device in devices:
            mac = device["mac"]
            ip = device["ip"]

            if mac not in mac_cache:
                mac_cache[mac] = get_vendor(mac, mac_lookup)
                processed += 1

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ç–µ–π
                if total_devices > 10 and processed % 5 == 0:
                    print(f"Progress: {processed}/{total_devices} devices processed")

            vendor = mac_cache[mac] or "Unknown"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
            device_info = {"ip": ip, "mac": mac, "vendor": vendor}
            table.append([ip, mac, vendor])
            json_output.append(device_info)

            # –ï—Å–ª–∏ MAC-–∞–¥—Ä–µ—Å –Ω–µ –±—ã–ª –≤ –±–∞–∑–µ —Ä–∞–Ω—å—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if mac not in known_macs:
                device_info["first_seen"] = datetime.now().isoformat()
                new_devices.append(device_info)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º IP-–∞–¥—Ä–µ—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                update_existing_device_ip(conn, mac, ip)

        # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        print("\n=== Scan Results ===")
        print(tabulate(table, headers=["IP", "MAC", "Vendor"]))
        print(f"\nTotal devices found: {len(devices)}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª
        with open("arp_scan_result.json", "w") as f:
            json.dump(json_output, f, indent=4)
        print("Results saved to arp_scan_result.json")

        # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if new_devices:
            print("\n=== New Devices ===")
            save_new_devices(conn, new_devices)
            print(f"üîî {len(new_devices)} new device(s) detected since last scan:")
            print(tabulate([[d["ip"], d["mac"], d["vendor"]] for d in new_devices], headers=["IP", "MAC", "Vendor"]))
            print("====================")
        else:
            print("\n=== New Devices ===")
            print("No new devices detected since last scan.")
            print("====================")
    else:
        print("\n=== Scan Results ===")
        print("No devices found.")
        print("====================")

    print("\nARP Network Scanner completed.")
